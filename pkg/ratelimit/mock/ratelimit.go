// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ratelimit/ratelimit.go
//
// Generated by this command:
//
//	mockgen -source=pkg/ratelimit/ratelimit.go -destination=pkg/ratelimit/mock/ratelimit.go
//

// Package mock_ratelimit is a generated GoMock package.
package mock_ratelimit

import (
	context "context"
	reflect "reflect"

	ratelimit "github.com/GeovaneCavalcante/rate-limit-api/pkg/ratelimit"
	gomock "go.uber.org/mock/gomock"
)

// MockRateLimiterInterface is a mock of RateLimiterInterface interface.
type MockRateLimiterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterInterfaceMockRecorder
}

// MockRateLimiterInterfaceMockRecorder is the mock recorder for MockRateLimiterInterface.
type MockRateLimiterInterfaceMockRecorder struct {
	mock *MockRateLimiterInterface
}

// NewMockRateLimiterInterface creates a new mock instance.
func NewMockRateLimiterInterface(ctrl *gomock.Controller) *MockRateLimiterInterface {
	mock := &MockRateLimiterInterface{ctrl: ctrl}
	mock.recorder = &MockRateLimiterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterInterface) EXPECT() *MockRateLimiterInterfaceMockRecorder {
	return m.recorder
}

// AddEvent mocks base method.
func (m *MockRateLimiterInterface) AddEvent(ctx context.Context, key string, timestamp int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvent", ctx, key, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockRateLimiterInterfaceMockRecorder) AddEvent(ctx, key, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockRateLimiterInterface)(nil).AddEvent), ctx, key, timestamp)
}

// CountEventsBeforeCurrent mocks base method.
func (m *MockRateLimiterInterface) CountEventsBeforeCurrent(ctx context.Context, key string, currentTimestamp int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEventsBeforeCurrent", ctx, key, currentTimestamp)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEventsBeforeCurrent indicates an expected call of CountEventsBeforeCurrent.
func (mr *MockRateLimiterInterfaceMockRecorder) CountEventsBeforeCurrent(ctx, key, currentTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEventsBeforeCurrent", reflect.TypeOf((*MockRateLimiterInterface)(nil).CountEventsBeforeCurrent), ctx, key, currentTimestamp)
}

// Limiter mocks base method.
func (m *MockRateLimiterInterface) Limiter(ctx context.Context, key string, opt *ratelimit.Options) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limiter", ctx, key, opt)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Limiter indicates an expected call of Limiter.
func (mr *MockRateLimiterInterfaceMockRecorder) Limiter(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limiter", reflect.TypeOf((*MockRateLimiterInterface)(nil).Limiter), ctx, key, opt)
}

// RemoveExpiredEvents mocks base method.
func (m *MockRateLimiterInterface) RemoveExpiredEvents(ctx context.Context, key string, recentTimestamp, intervalSecund float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveExpiredEvents", ctx, key, recentTimestamp, intervalSecund)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveExpiredEvents indicates an expected call of RemoveExpiredEvents.
func (mr *MockRateLimiterInterfaceMockRecorder) RemoveExpiredEvents(ctx, key, recentTimestamp, intervalSecund any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveExpiredEvents", reflect.TypeOf((*MockRateLimiterInterface)(nil).RemoveExpiredEvents), ctx, key, recentTimestamp, intervalSecund)
}

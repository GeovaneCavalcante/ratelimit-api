// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ratelimit/event.go
//
// Generated by this command:
//
//	mockgen -source=pkg/ratelimit/event.go -destination=pkg/ratelimit/mock/event.go
//

// Package mock_ratelimit is a generated GoMock package.
package mock_ratelimit

import (
	context "context"
	reflect "reflect"
	time "time"

	ratelimit "github.com/GeovaneCavalcante/rate-limit-api/pkg/ratelimit"
	gomock "go.uber.org/mock/gomock"
)

// MockEventStorageInterface is a mock of EventStorageInterface interface.
type MockEventStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventStorageInterfaceMockRecorder
}

// MockEventStorageInterfaceMockRecorder is the mock recorder for MockEventStorageInterface.
type MockEventStorageInterfaceMockRecorder struct {
	mock *MockEventStorageInterface
}

// NewMockEventStorageInterface creates a new mock instance.
func NewMockEventStorageInterface(ctrl *gomock.Controller) *MockEventStorageInterface {
	mock := &MockEventStorageInterface{ctrl: ctrl}
	mock.recorder = &MockEventStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStorageInterface) EXPECT() *MockEventStorageInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockEventStorageInterface) Add(ctx context.Context, key string, events ...*ratelimit.Event) ([]*ratelimit.Event, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range events {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].([]*ratelimit.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockEventStorageInterfaceMockRecorder) Add(ctx, key any, events ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, events...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockEventStorageInterface)(nil).Add), varargs...)
}

// CountRange mocks base method.
func (m *MockEventStorageInterface) CountRange(ctx context.Context, key, min, max string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRange", ctx, key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRange indicates an expected call of CountRange.
func (mr *MockEventStorageInterfaceMockRecorder) CountRange(ctx, key, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRange", reflect.TypeOf((*MockEventStorageInterface)(nil).CountRange), ctx, key, min, max)
}

// FindRangeWithScores mocks base method.
func (m *MockEventStorageInterface) FindRangeWithScores(ctx context.Context, key string, start, stop int64) ([]*ratelimit.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRangeWithScores", ctx, key, start, stop)
	ret0, _ := ret[0].([]*ratelimit.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRangeWithScores indicates an expected call of FindRangeWithScores.
func (mr *MockEventStorageInterfaceMockRecorder) FindRangeWithScores(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRangeWithScores", reflect.TypeOf((*MockEventStorageInterface)(nil).FindRangeWithScores), ctx, key, start, stop)
}

// RemoveRangeByScore mocks base method.
func (m *MockEventStorageInterface) RemoveRangeByScore(ctx context.Context, key, min, max string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRangeByScore", ctx, key, min, max)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRangeByScore indicates an expected call of RemoveRangeByScore.
func (mr *MockEventStorageInterfaceMockRecorder) RemoveRangeByScore(ctx, key, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRangeByScore", reflect.TypeOf((*MockEventStorageInterface)(nil).RemoveRangeByScore), ctx, key, min, max)
}

// SetEventTLL mocks base method.
func (m *MockEventStorageInterface) SetEventTLL(ctx context.Context, key string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventTLL", ctx, key, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventTLL indicates an expected call of SetEventTLL.
func (mr *MockEventStorageInterfaceMockRecorder) SetEventTLL(ctx, key, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventTLL", reflect.TypeOf((*MockEventStorageInterface)(nil).SetEventTLL), ctx, key, ttl)
}
